Limit  (cost=79621.20..79621.66 rows=4 width=195)
   ->  Gather Merge  (cost=79621.20..79621.66 rows=4 width=195)
         Workers Planned: 1
         ->  Sort  (cost=78621.19..78621.20 rows=4 width=195)
               Sort Key: order_task_schedules.priority DESC, (lower(order_task_schedules.time_range))
               ->  Nested Loop  (cost=1.42..78621.15 rows=4 width=195)
                     ->  Nested Loop  (cost=1.14..78616.56 rows=15 width=213)
                           ->  Nested Loop  (cost=0.57..78567.77 rows=15 width=209)
                                 ->  Parallel Seq Scan on order_task_schedules  (cost=0.00..4089.93 rows=20874 width=31)
                                       Filter: (time_range @> '2025-07-30 13:58:22.21271+00'::timestamp with time zone)
                                 ->  Index Scan using order_tasks_pkey on order_tasks  (cost=0.57..3.57 rows=1 width=182)
                                       Index Cond: (id = order_task_schedules.order_task_id)
                                       Filter: (((snooze_until IS NULL) OR (snooze_until < '2025-07-30 13:58:21.86673'::timestamp without time zone)) AND ((status)::text = ANY ('{active,paused,processing}'::text[])))
                           ->  Index Scan using orders_pkey on orders  (cost=0.56..3.25 rows=1 width=8)
                                 Index Cond: (id = order_tasks.order_id)
                     ->  Index Scan using corp_accounts_pkey on corp_accounts  (cost=0.29..0.31 rows=1 width=4)
                           Index Cond: (id = orders.corp_account_id)
                           Filter: ((name)::text ~~* '%%'::text)